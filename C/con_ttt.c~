// Steven Karl
// 12/8/2021
// Tic Tac Toe - C
// Console Version
// End Header


// Includes
#include <stdio.h>


// Globals
int board[25];
const char O = 'o';
const char X = 'x';
const char WALL = '*';
const char EMPTY = '?';


// Board Layout
/*
  0,1,2,3,4, 5, 6,7,8, 9,10, 11,12,13, 14,15, 16,17,18, 19,20, 21,22,23,24
  :,:,:,:,:
  :,6,7,8,:
  :,11,12,13,:
  :,16,17,18,:
  :,:,:,:,:

*/

int conv_board[9] = {6,7,8,11,12,13,16,17,18};

void board_init(int *board){
  // Fill the board with walls
  for(int i = 0; i < 25; i++){
    board[i] = WALL;
  }

  // Replace the walls with empties
  for(int i = 0; i < 9; i++){
    board[conv_board[i]] = EMPTY;
  }
}

void board_print(int *board){
  for(int i = 0; i < 25; i++){
    printf(" %c ",board[i]);
    if((i+1) % 5 == 0){
      printf("\n");
    }
  }
}

int game_done(int *board){
  // Check for sets of 3 in the board
  for(int i = 0; i < 25; i++){
    
  }
}

void game_loop(int *board){
  // Initialize the board
  board_init(board);
  
  // Initialize running
  int running = 1;

  // Initialize the current player
  int cp = 1;
  
  // Loop while the game is running
  while(running){
    // Print the board
    board_print(board);

    // Get the current player choice
    printf("Current Player: %s, Current Players Mark: %c\n", cur_player.name, cur_player.mark);
    printf("Enter the quadrant location that you want to place your mark (1-9): ");
    scanf("%d", &u_input);
    
    // Update the player
    if cp == 1 ? cp = 2, cp = 1;

    // Update the board
    update_board(board);

    // Check win
    if(game_done()){
      running = 0;
    }
  }
}

int get_mode(){
  // Ask 1 v 1 or 1 v cpu
  int u_input;
  printf("Choose play mode from options below");
  printf("1. 1 player - You vs CPU\n");
  printf("2. 2 players - You vs Friend\n");
  printf("Choose your mode - 1 or 2: ");
  scanf("%d", &u_input);

  // Check the user input
  if(u_input != 1 && u_input != 2){
    return 0;
  }
  
  // Return
  return u_input;
}

int main(){
  // Find the game mode
  // 1. 1 v 1
  // 2. 1 v cpu
  mode = get_mode();

  if(mode == 0){
    printf("Invalid game mode selection\n");
    return mode;
  }

  // Setup the game
  game_loop(board, mode);

  // Ending Message
  printf("End of the game\n");

  return
}
